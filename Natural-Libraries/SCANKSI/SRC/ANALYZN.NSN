* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* NATURAL SOURCE CODE ANALYZER 
* :author
*************************************************************** 
define data 
parameter 
1 lib (a8) 
LOCAL USING USR-MSG   /* Data for message exchange 
LOCAL USING USR-FLD   /* Description of the field in error 
local using anamod0a 
local using nscanewl 
LOCAL 
1 #L-WORKFILE (A255) 
1 COUNT-NAT (I4) 
1 MAP (L) const <FALSE>/* Show Processing Map 
1 DB (L) const <TRUE> /* use Adabas File 250 for Sort Resultlist 
1 #erg (i4/1:5) 
1 #sum (i4) 
1 #status (a70) 
1 USR1055L 
  2 OBJECT-KEY 
    3 LIBRARY        (A08) 
    3 OBJECT-FROM    (A33) 
    3 OBJECT-TO      (A33) 
    3 OBJECT-KIND    (A01) 
/* 
  2 INPUTS 
    3 OPT-ACCESS     (A01) 
    3 OPT-TYPE-OP    (A01) 
    3 OPT-TYPE       (A24) 
    3 OPT-SCROLL     (A01) 
    3 OPT-WILDCARD   (A01) 
    3 OPT-ASTERISK   (A01) 
    3 OPT-AMOUNT     (I02) 
/* 
  2 INPUT-OUTPUTS 
    3 INT-HANDLE     (I04) 
    3 NEXT-OBJ       (A32) 
  2 OUTPUTS 
    3 RETURNED       (I02) 
    3 LIST-OBJ       (A32/1:255) 
    3 LIST-TYPE-SRC  (A01/1:255) 
    3 LIST-TYPE-MOD  (A01/1:255) 
/* 
1 USR1055N 
  2 VERSION          (I01)     INIT <2> 
  2 V1-NSC-CKECK     (A01) 
  2 V2-DBID          (N05) 
  2 V2-FNR           (N04) 
  2 V2-PSW           (A08) 
  2 V2-CIP           (N08) 
  2 V2-SYSFILE       (A01) 
1 REDEFINE USR1055N 
  2 EXTENDED-PARMS 
    3 EXTENDED-DATA  (A01/1:28) 
local 
1 #i3 (i4) 
1 #sumlines (i4) 
1 #progressbar (a75) 
1 #progress (i4) 
1 #count (i4) 
1 #out (a200) 
1 redefine #out 
  2 #out-lib (a8) 
  2 filler 1x 
  2 #out-obj (a8) 
  2 filler 1x 
  2 #out-type (a1) 
  2 filler 1x 
  2 #out-mode (a1) 
  2 filler 1x 
  2 #out-code (a3) 
  2 filler 1x 
  2 #out-line (a5) 
  2 filler 1x 
  2 #out-comment (a122) 
1 #temp (a100) 
1 #OLDPROG (A8) 
1 #count-temp (i4) 
1 #sum-temp (i4) 
end-define 
format ls=133 ps=55 
/* 
perform count-nat 
/* 
compress '/tmp/' lib '.txt' into #l-workfile leaving no 
define work file 1 #l-workfile 
/* 
USR1055L.LIBRARY     := LIB 
USR1055L.OBJECT-FROM := 'A>' 
USR1055L.OBJECT-TO   := ' ' 
USR1055L.OBJECT-KIND := 'S' 
USR1055L.OPT-TYPE-OP := 'I' 
USR1055L.OPT-TYPE    := 'PNSCH' 
USR1055L.OPT-SCROLL  := 'D' 
USR1055L.OPT-AMOUNT  := 255 
USR1055L.OPT-ACCESS := 'O'     /* Open 
NAD-FLD.FIELD-POSITION := 2 
/* 
reset #COUNTS 
anamod0.SHOWMAP := MAP 
anamod0.DBACCESS := DB 
if db 
/* delete all records in temporary file 
  find number nscanew with sp-library-code-modul-line > ' ' 
  #count-temp := *number 
  compress 'Temporary Records from last Analyze will be deleted !' into #status 
  reset #sum 
  read nscanew by isn 
    delete 
    end transaction 
    add  1 to #sum-temp 
    if anamod0.SHOWMAP 
      #progress := 75 * #sum-temp / #count-temp 
      MOVE ALL 'X' TO #progressbar UNTIL #progress 
      set control 'n' 
      input using map 'ANAMAP' 
    end-if 
  end-read 
  reset #status #progressbar 
end-if 
main. REPEAT 
/* 
  CALLNAT 'USR1055N' USR1055L  USR1055N.EXTENDED-PARMS 
    NAD-MSG   NAD-FLD 
/* 
  USR1055L.OPT-ACCESS := 'R'   /* Read 
/* 
  FOR #i3 = 1 TO USR1055L.RETURNED 
/*  Module Processing 
    anamod0.#library := USR1055L.LIBRARY 
    anamod0.#object := LIST-OBJ (#i3) 
    anamod0.#type := LIST-TYPE-SRC (#i3) 
    callnat 'ANAMOD0N' anamod0 
    if anamod0.SHOWMAP 
      #progress := 75 * #sum / count-nat 
      MOVE ALL 'X' TO #progressbar UNTIL #progress 
      set control 'n' 
      input using map 'ANAMAP' 
    end-if 
    add #lines to #sumlines 
/* Reporting 
    decide on first value of LIST-TYPE-SRC (#i3) 
      value 'P' /* Program 
        add 1 to #erg(1) 
      value 'N' /* Subprogram 
        add 1 to #erg(2) 
      value 'S' /* Subroutine 
        add 1 to #erg(3) 
      value 'C' /* Copycode 
        add 1 to #erg(4) 
      value 'H' /* Helproutine 
        add 1 to #erg(5) 
      any value 
        add 1 to #sum 
      none value 
        ignore 
    end-decide 
  END-FOR 
 
  IF MSG-NR NE 0 
/* leave loop if last object reached 
    ESCAPE BOTTOM (main.) 
  END-IF 
/* 
END-REPEAT 
USR1055L.OPT-ACCESS := 'C'     /* Close 
CALLNAT 'USR1055N' USR1055L  USR1055N.EXTENDED-PARMS 
  NAD-MSG   NAD-FLD 
/* End Report 
if db 
/* write records to workfile workfile 
  read nscanew by sp-library-code-modul-line 
    at break of code 
      #temp := old(code) 
      decide on first value of #temp 
        value '???' 
          COUNTASKMOD := #count 
        value 'CAL' 
          COUNTCALLMOD := #count 
        value 'DBA' 
          COUNTDBMOD := #count 
        value 'IFR' 
          COUNTIFMOD := #count 
        value 'HEX' 
          COUNTHEXMOD := #count 
        value 'RED' 
          COUNTREDMOD := #count 
        value 'WRK' 
          COUNTWORKMOD := #count 
        value 'SOR' 
          COUNTSORTMOD := #count 
        value 'PRT' 
          COUNTPRTMOD := #count 
        value 'CPD' 
          COUNTPCMOD := #count 
        value 'ISN' 
          COUNTISNMOD := #count 
        value 'PRO' 
          COUNTPROCESSMOD := #count 
        value 'JUL' 
          COUNTJULIANMOD := #count 
        value 'INC' 
          COUNTINCOREMOD := #count 
        none value 
          ignore 
      end-decide 
      reset #count 
    end-break 
    reset #out 
    #out-lib := nscanew.library 
    #out-obj := nscanew.modul 
    #out-type := nscanew.type 
    #out-mode := nscanew.mode 
    move edited nscanew.line (em=99999) to #out-line 
    #out-code := nscanew.code 
    #out-comment := COMMENT 
    write work 1 #out 
    IF #OLDPROG <> nscanew.modul 
      ADD 1 TO #COUNT 
    END-IF 
    #OLDPROG:= nscanew.modul 
  end-read 
end-if 
close work 1 
if not anamod0.SHOWMAP 
  newpage 
  write 'Result of Library' USR1055L.LIBRARY ':' 
  write 'Programs     :' #erg(1) 
  write 'Subprograms  :' #erg(2) 
  write 'Subroutines  :' #erg(3) 
  write 'Copycodes    :' #erg(4) 
  write 'Helproutines :' #erg(5) 
  write 'Total        :' #sum 
  write 'Source-Lines :' #sumlines 
  write '---------------------------------------------' 
  write '                    COUNTS     MODULES' 
  write 'CALL         :' COUNTCALL COUNTCALLMOD 
  write 'DB           :' COUNTDB COUNTDBMOD 
  write 'WORK         :' COUNTWORK COUNTWORKMOD 
  write 'HEX          :' COUNTHEX COUNTHEXMOD 
  write 'REDEFINE     :' COUNTRED COUNTREDMOD 
  write 'IF           :' COUNTIF COUNTIFMOD 
  write 'PRINTER      :' COUNTPRT COUNTPRTMOD 
  write 'UP/DOWNLOAD  :' COUNTPC COUNTPCMOD 
  write 'SORT         :' COUNTSORT COUNTSORTMOD 
  write '???          :' COUNTASK COUNTASKMOD 
  write 'ISN          :' COUNTISN COUNTISNMOD 
  write 'PROCESS      :' COUNTPROCESS COUNTPROCESSMOD 
  write 'JULIAN DATE  :' COUNTJULIAN COUNTJULIANMOD 
else 
  compress 'all' #sum 'Objects of Library' LIB 'being processed !' into #status 
* write using form 'ANAMAP' 
end-if 
/* 
define subroutine count-nat 
reset COUNT-NAT 
USR1055L.LIBRARY     := LIB 
USR1055L.OBJECT-FROM := 'A>' 
USR1055L.OBJECT-TO   := ' ' 
USR1055L.OBJECT-KIND := 'S' 
USR1055L.OPT-TYPE-OP := 'I' 
USR1055L.OPT-TYPE    := 'PNSCH' 
USR1055L.OPT-SCROLL  := 'D' 
USR1055L.OPT-AMOUNT  := 255 
USR1055L.OPT-ACCESS := 'O'     /* Open 
NAD-FLD.FIELD-POSITION := 2 
REPEAT 
/* 
  CALLNAT 'USR1055N' USR1055L  USR1055N.EXTENDED-PARMS 
    NAD-MSG   NAD-FLD 
/* 
  add USR1055L.RETURNED to count-nat 
 
  USR1055L.OPT-ACCESS := 'R'   /* Readend-subroutine 
  IF MSG-NR NE 0 
/* leave loop if last object reached 
    ESCAPE BOTTOM 
  END-IF 
/* 
END-REPEAT 
USR1055L.OPT-ACCESS := 'C'     /* Close 
CALLNAT 'USR1055N' USR1055L  USR1055N.EXTENDED-PARMS 
  NAD-MSG   NAD-FLD 
end-subroutine 
close work 1 
END 
